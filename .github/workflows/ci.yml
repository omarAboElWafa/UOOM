name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Lint and Test
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: uoop_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      kafka:
        image: confluentinc/cp-kafka:7.4.0
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
          KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
          KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
          KAFKA_JMX_PORT: 9101
          KAFKA_JMX_HOSTNAME: localhost
          KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
        options: >-
          --health-cmd "kafka-topics --bootstrap-server localhost:9092 --list"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 9092:9092
      
      zookeeper:
        image: confluentinc/cp-zookeeper:7.4.0
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
        options: >-
          --health-cmd "echo ruok | nc localhost 2181"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 2181:2181

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        npm ci
        cd apps/optimization-service && pip install -r requirements.txt

    - name: Run linting
      run: |
        npm run lint
        cd apps/optimization-service && black --check . && isort --check-only . && flake8 .

    - name: Run type checking
      run: |
        npm run type-check
        cd apps/optimization-service && mypy .

    - name: Run unit tests
      run: |
        npm test
        cd apps/optimization-service && pytest tests/unit/

    - name: Run integration tests
      run: |
        npm run test:e2e
        cd apps/optimization-service && pytest tests/integration/

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Run npm audit
      run: npm audit --audit-level moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Build and Test Docker Images
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push orchestration service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/orchestration-service/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/uoop-orchestration:latest
          ${{ secrets.DOCKER_USERNAME }}/uoop-orchestration:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push optimization service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/optimization-service/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/uoop-optimization:latest
          ${{ secrets.DOCKER_USERNAME }}/uoop-optimization:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push outbox relay service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/outbox-relay-service/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/uoop-outbox-relay:latest
          ${{ secrets.DOCKER_USERNAME }}/uoop-outbox-relay:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push capacity service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/capacity-service/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/uoop-capacity:latest
          ${{ secrets.DOCKER_USERNAME }}/uoop-capacity:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push API gateway
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/api-gateway/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/uoop-api-gateway:latest
          ${{ secrets.DOCKER_USERNAME }}/uoop-api-gateway:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy infrastructure
      run: |
        cd infrastructure
        npm ci
        npm run deploy:staging

    - name: Deploy to ECS
      run: |
        aws ecs update-service --cluster uoop-staging --service orchestration-service --force-new-deployment
        aws ecs update-service --cluster uoop-staging --service optimization-service --force-new-deployment
        aws ecs update-service --cluster uoop-staging --service outbox-relay-service --force-new-deployment
        aws ecs update-service --cluster uoop-staging --service capacity-service --force-new-deployment
        aws ecs update-service --cluster uoop-staging --service api-gateway --force-new-deployment

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy infrastructure
      run: |
        cd infrastructure
        npm ci
        npm run deploy:production

    - name: Deploy to ECS
      run: |
        aws ecs update-service --cluster uoop-production --service orchestration-service --force-new-deployment
        aws ecs update-service --cluster uoop-production --service optimization-service --force-new-deployment
        aws ecs update-service --cluster uoop-production --service outbox-relay-service --force-new-deployment
        aws ecs update-service --cluster uoop-production --service capacity-service --force-new-deployment
        aws ecs update-service --cluster uoop-production --service api-gateway --force-new-deployment

    - name: Run smoke tests
      run: |
        # Wait for services to be healthy
        sleep 60
        
        # Run basic health checks
        curl -f http://${{ secrets.PRODUCTION_API_URL }}/health || exit 1
        curl -f http://${{ secrets.PRODUCTION_OPTIMIZATION_URL }}/health || exit 1

  # Performance Testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Artillery
      run: npm install -g artillery

    - name: Run load tests
      run: |
        artillery run scripts/load-tests/order-creation.yml
        artillery run scripts/load-tests/optimization-requests.yml

    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: artillery-report.json 